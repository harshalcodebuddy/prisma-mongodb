version: '3.8'

services:
  api:
    build: 
      context: .
      dockerfile: ./dockerfile
    init: true
    restart: always
    volumes:
      - ./:/app 
    ports:
      - 3001:3001
    depends_on:
      - mongo1
    networks:
      - mynetworks
    env_file:
      - path: .env
        required: true
  mongo1:
    image: mongo:4.4
    command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "30001"]
    volumes:
      - mongo1:/data/db
    ports:
      - 30001:30001
    healthcheck:
      test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo1:30001\"},{_id:1,host:\"mongo2:30002\"},{_id:2,host:\"mongo3:30003\"}]}).ok || rs.status().ok" | mongo --port 30001 --quiet) -eq 1
      interval: 10s
      start_period: 30s
    depends_on:
      - mongo2
      - mongo3
    logging:
      driver: none # disable logging
    networks:
      - mynetworks
  mongo2:
    image: mongo:4.4
    command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "30002"]
    volumes:
      - mongo2:/data/db
    ports:
      - 30002:30002
    logging:
      driver: none # disable logging
    networks:
      - mynetworks
  mongo3:
    image: mongo:4.4
    command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "30003"]
    volumes:
      - mongo3:/data/db
    ports:
      - 30003:30003
    logging:
      driver: none # disable logging
    networks:
      - mynetworks

networks:
  mynetworks:
    driver: bridge
    
volumes:
  mongo1:
  mongo2:
  mongo3:

